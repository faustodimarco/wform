/**
 * Wform- Combined minified version
 * A self-hostable multi-step form solution for Webflow
 * 
 * This file combines all the necessary components into a single minified file
 * for easy inclusion in Webflow projects.
 */

/**
 * EventEmitter - Custom event system for Wfrom
 */
class EventEmitter {
  constructor() {
    this.events = {};
  }
  
  on(event, callback) {
    if (!this.events[event]) {
      this.events[event] = [];
    }
    this.events[event].push(callback);
  }
  
  off(event, callback) {
    if (!this.events[event]) return;
    this.events[event] = this.events[event].filter(cb => cb !== callback);
  }
  
  emit(event, data) {
    if (!this.events[event]) return;
    this.events[event].forEach(callback => {
      try {
        callback(data);
      } catch (error) {
        console.error(`Error in event listener for ${event}:`, error);
      }
    });
  }
}

/**
 * ErrorHandler - Error handling utility for SimpleFormly
 */
class ErrorHandler {
  static log(message, type = 'log') {
    console[type](`[SimpleFormly] ${message}`);
  }
  
  static warn(message) {
    this.log(message, 'warn');
  }
  
  static error(message) {
    this.log(message, 'error');
  }
  
  static showInputError(input, message) {
    try {
      input.classList.add('error');
      const wrapper = input.closest('.form-input-wrapper');
      if (wrapper) {
        wrapper.classList.add('error');
      }
      
      const errorElement = input.parentElement.querySelector('.error-message');
      if (errorElement) {
        errorElement.textContent = message || input.validationMessage || 'Invalid input';
        errorElement.style.display = '';
      } else {
        const newErrorElement = document.createElement('div');
        newErrorElement.className = 'error-message';
        newErrorElement.textContent = message || input.validationMessage || 'Invalid input';
        newErrorElement.style.color = 'red';
        newErrorElement.style.fontSize = '12px';
        newErrorElement.style.marginTop = '4px';
        
        const target = wrapper || input;
        target.parentNode.insertBefore(newErrorElement, target.nextSibling);
      }
      
      this.log(`Validation error: ${message || input.validationMessage || 'Invalid input'}`, 'error');
    } catch (error) {
      this.error(`Error showing input error: ${error.message}`);
      console.error(error);
    }
  }
  
  static clearInputError(input) {
    try {
      input.classList.remove('error');
      const wrapper = input.closest('.form-input-wrapper');
      if (wrapper) {
        wrapper.classList.remove('error');
      }
      
      const errorElement = input.parentElement.querySelector('.error-message');
      if (errorElement) {
        errorElement.textContent = '';
        errorElement.style.display = 'none';
      }
    } catch (error) {
      this.error(`Error clearing input error: ${error.message}`);
      console.error(error);
    }
  }
}

/**
 * DOMUtils - DOM utility functions for SimpleFormly
 */
class DOMUtils {
  static findByData(attribute, value, context = document) {
    return Array.from(context.querySelectorAll(`[data-${attribute}="${value}"]`));
  }
  
  static show(element) {
    if (!element) return;
    element.style.display = '';
  }
  
  static hide(element) {
    if (!element) return;
    element.style.display = 'none';
  }
  
  static addClass(element, className) {
    if (!element) return;
    element.classList.add(className);
  }
  
  static removeClass(element, className) {
    if (!element) return;
    element.classList.remove(className);
  }
  
  static toggleClass(element, className, force) {
    if (!element) return;
    element.classList.toggle(className, force);
  }
  
  static hasClass(element, className) {
    if (!element) return false;
    return element.classList.contains(className);
  }
  
  static scrollTo(element, options = {}) {
    if (!element) return;
    const defaultOptions = {
      behavior: 'smooth',
      block: 'start'
    };
    const scrollOptions = { ...defaultOptions, ...options };
    element.scrollIntoView(scrollOptions);
  }
}

/**
 * ValidationRules - Validation rules for SimpleFormly
 */
class ValidationRules {
  static validateEmail(value) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(value);
  }
  
  static validatePhone(value) {
    const digitsOnly = value.replace(/\D/g, '');
    return digitsOnly.length >= 7;
  }
  
  static validateRequired(value) {
    return value.trim().length > 0;
  }
  
  static validateNumber(value, options = {}) {
    const num = parseFloat(value);
    if (isNaN(num)) {
      return false;
    }
    if (options.min !== undefined && num < options.min) {
      return false;
    }
    if (options.max !== undefined && num > options.max) {
      return false;
    }
    return true;
  }
  
  static validateCheckbox(checked, required) {
    return !required || checked;
  }
  
  static validateRadioGroup(radioGroup, required) {
    if (!required) {
      return true;
    }
    return Array.from(radioGroup).some(radio => radio.checked);
  }
  
  static validateSelect(value, required) {
    if (!required) {
      return true;
    }
    return value !== '';
  }
  
  static formatPhone(value, format) {
    const digitsOnly = value.replace(/\D/g, '');
    if (!format || !digitsOnly) {
      return digitsOnly;
    }
    
    let result = '';
    let digitIndex = 0;
    
    for (let i = 0; i < format.length; i++) {
      if (format[i] === 'x') {
        if (digitIndex < digitsOnly.length) {
          result += digitsOnly[digitIndex];
          digitIndex++;
        } else {
          break;
        }
      } else {
        result += format[i];
      }
    }
    
    return result;
  }
}

/**
 * Step - Step management for SimpleFormly
 */
class Step {
  constructor(element, index, eventEmitter) {
    this.element = element;
    this.index = index;
    this.eventEmitter = eventEmitter;
    this.inputs = [];
    this.isValid = false;
    this.isCard = element.getAttribute('data-card') === 'true';
    this.initialized = false;
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn(`Step ${this.index + 1} already initialized`);
        return;
      }
      
      this.findInputs();
      this.setupEventListeners();
      
      this.hide();
      
      this.initialized = true;
      this.eventEmitter.emit('step:init', { step: this });
      
      ErrorHandler.log(`Step ${this.index + 1} initialized successfully`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing step ${this.index + 1}: ${error.message}`);
      console.error(error);
    }
  }
  
  findInputs() {
    try {
      const inputElements = this.element.querySelectorAll('input, select, textarea');
      
      inputElements.forEach(inputElement => {
        this.inputs.push(inputElement);
      });
      
      if (this.isCard || this.inputs.length === 0) {
        this.isValid = true;
      } else {
        this.isValid = false;
      }
      
      ErrorHandler.log(`Found ${this.inputs.length} inputs in step ${this.index + 1}`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error finding inputs in step ${this.index + 1}: ${error.message}`);
      console.error(error);
    }
  }
  
  setupEventListeners() {
    try {
      this.inputs.forEach(input => {
        input.addEventListener('input', () => {
          this.eventEmitter.emit('input:change', { 
            step: this, 
            input: input 
          });
        });
        
        input.addEventListener('blur', () => {
          this.eventEmitter.emit('input:blur', { 
            step: this, 
            input: input 
          });
        });
      });
      
      ErrorHandler.log(`Event listeners setup for step ${this.index + 1}`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error setting up event listeners for step ${this.index + 1}: ${error.message}`);
      console.error(error);
    }
  }
  
  show() {
    try {
      DOMUtils.show(this.element);
      this.eventEmitter.emit('step:show', { step: this });
      
      ErrorHandler.log(`Step ${this.index + 1} shown`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error showing step ${this.index + 1}: ${error.message}`);
      console.error(error);
    }
  }
  
  hide() {
    try {
      DOMUtils.hide(this.element);
      this.eventEmitter.emit('step:hide', { step: this });
      
      ErrorHandler.log(`Step ${this.index + 1} hidden`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error hiding step ${this.index + 1}: ${error.message}`);
      console.error(error);
    }
  }
  
  hasRequiredFields() {
    return this.inputs.some(input => input.required);
  }
  
  getRequiredInputs() {
    return this.inputs.filter(input => input.required);
  }
  
  setValidity(isValid) {
    this.isValid = isValid;
    this.eventEmitter.emit('step:validate', { 
      step: this, 
      isValid: isValid 
    });
    
    ErrorHandler.log(`Step ${this.index + 1} validity set to ${isValid}`, 'info');
  }
}

/**
 * Validator - Validation engine for SimpleFormly
 */
class Validator {
  constructor(form, eventEmitter) {
    this.form = form;
    this.eventEmitter = eventEmitter;
    this.initialized = false;
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn('Validator already initialized');
        return;
      }
      
      this.setupEventListeners();
      
      this.initialized = true;
      this.eventEmitter.emit('validator:init', { validator: this });
      
      ErrorHandler.log('Validator initialized successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing validator: ${error.message}`);
      console.error(error);
    }
  }
  
  setupEventListeners() {
    try {
      this.eventEmitter.on('input:change', (data) => {
        this.validateInput(data.input);
        this.updateStepValidity(data.step);
        this.updateButtonState();
      });
      
      this.eventEmitter.on('input:blur', (data) => {
        this.validateInput(data.input);
        this.updateStepValidity(data.step);
        this.updateButtonState();
      });
      
      this.eventEmitter.on('step:change', () => {
        this.updateButtonState();
      });
      
      ErrorHandler.log('Validator event listeners setup successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error setting up validator event listeners: ${error.message}`);
      console.error(error);
    }
  }
  
  validateStep(step) {
    try {
      if (step.isCard || step.inputs.length === 0) {
        step.setValidity(true);
        return true;
      }
      
      let isValid = true;
      
      step.inputs.forEach(input => {
        if (!this.validateInput(input)) {
          isValid = false;
        }
      });
      
      step.setValidity(isValid);
      
      this.updateButtonState();
      
      return isValid;
    } catch (error) {
      ErrorHandler.error(`Error validating step ${step.index + 1}: ${error.message}`);
      console.error(error);
      return false;
    }
  }
  
  validateInput(input) {
    try {
      if (input.disabled || input.type === 'hidden') {
        return true;
      }
      
      const isRequired = input.required;
      
      if (!isRequired && !input.value.trim()) {
        this.clearInputError(input);
        return true;
      }
      
      const isValid = input.checkValidity();
      
      if (isValid) {
        this.clearInputError(input);
      } else {
        this.showInputError(input);
      }
      
      return isValid;
    } catch (error) {
      ErrorHandler.error(`Error validating input: ${error.message}`);
      console.error(error);
      return false;
    }
  }
  
  updateStepValidity(step) {
    try {
      if (step.isCard || step.inputs.length === 0) {
        step.setValidity(true);
        return;
      }
      
      const requiredInputs = step.getRequiredInputs();
      
      if (requiredInputs.length === 0) {
        step.setValidity(true);
        return;
      }
      
      const isValid = requiredInputs.every(input => input.checkValidity());
      
      step.setValidity(isValid);
    } catch (error) {
      ErrorHandler.error(`Error updating step validity: ${error.message}`);
      console.error(error);
    }
  }
  
  updateButtonState() {
    try {
      const currentStep = this.form.steps[this.form.currentStepIndex];
      
      this.form.nextButtons.forEach(button => {
        if (this.form.currentStepIndex >= this.form.steps.length - 1) {
          DOMUtils.addClass(button, 'disabled');
          button.disabled = true;
        } else if (!currentStep.isValid) {
          DOMUtils.addClass(button, 'disabled');
          button.disabled = true;
        } else {
          DOMUtils.removeClass(button, 'disabled');
          button.disabled = false;
        }
      });
      
      if (this.form.submitButton) {
        if (this.form.currentStepIndex === this.form.steps.length - 1 && currentStep.isValid) {
          DOMUtils.removeClass(this.form.submitButton, 'disabled');
          this.form.submitButton.disabled = false;
        } else {
          DOMUtils.addClass(this.form.submitButton, 'disabled');
          this.form.submitButton.disabled = true;
        }
      }
    } catch (error) {
      ErrorHandler.error(`Error updating button state: ${error.message}`);
      console.error(error);
    }
  }
  
  showInputError(input) {
    try {
      DOMUtils.addClass(input, 'error');
      
      const wrapper = input.closest('.form-input-wrapper');
      if (wrapper) {
        DOMUtils.addClass(wrapper, 'error');
      }
      
      const errorElement = input.parentElement.querySelector('.error-message');
      if (errorElement) {
        errorElement.textContent = input.validationMessage || 'Invalid input';
        DOMUtils.show(errorElement);
      }
      
      this.eventEmitter.emit('validation:error', { 
        input: input, 
        message: input.validationMessage || 'Invalid input' 
      });
    } catch (error) {
      ErrorHandler.error(`Error showing input error: ${error.message}`);
      console.error(error);
    }
  }
  
  clearInputError(input) {
    try {
      DOMUtils.removeClass(input, 'error');
      
      const wrapper = input.closest('.form-input-wrapper');
      if (wrapper) {
        DOMUtils.removeClass(wrapper, 'error');
      }
      
      const errorElement = input.parentElement.querySelector('.error-message');
      if (errorElement) {
        errorElement.textContent = '';
        DOMUtils.hide(errorElement);
      }
      
      this.eventEmitter.emit('validation:clear', { input: input });
    } catch (error) {
      ErrorHandler.error(`Error clearing input error: ${error.message}`);
      console.error(error);
    }
  }
}

/**
 * PhoneFormatter - Phone number formatting for SimpleFormly
 */
class PhoneFormatter {
  constructor(input, format) {
    this.input = input;
    this.format = format || 'xxx-xxx-xxxx';
    this.initialized = false;
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn('Phone formatter already initialized');
        return;
      }
      
      this.setupEventListeners();
      
      if (this.input.value) {
        this.formatInput();
      }
      
      this.initialized = true;
      ErrorHandler.log('Phone formatter initialized successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing phone formatter: ${error.message}`);
      console.error(error);
    }
  }
  
  setupEventListeners() {
    try {
      this.input.addEventListener('input', () => {
        this.formatInput();
      });
      
      this.input.addEventListener('blur', () => {
        this.formatInput();
      });
      
      ErrorHandler.log('Phone formatter event listeners setup successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error setting up phone formatter event listeners: ${error.message}`);
      console.error(error);
    }
  }
  
  formatInput() {
    try {
      const value = this.input.value;
      
      if (!value) {
        return;
      }
      
      const formattedValue = ValidationRules.formatPhone(value, this.format);
      
      if (formattedValue !== value) {
        this.input.value = formattedValue;
      }
    } catch (error) {
      ErrorHandler.error(`Error formatting phone number: ${error.message}`);
      console.error(error);
    }
  }
  
  static initializeAll(form) {
    try {
      const phoneInputs = document.querySelectorAll('input[data-phone-autoformat]');
      
      phoneInputs.forEach(input => {
        const format = input.getAttribute('data-phone-autoformat');
        const formatter = new PhoneFormatter(input, format);
        formatter.init();
      });
      
      ErrorHandler.log(`Initialized phone formatting for ${phoneInputs.length} inputs`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing phone formatting: ${error.message}`);
      console.error(error);
    }
  }
}

/**
 * EmailValidator - Email validation for SimpleFormly
 */
class EmailValidator {
  constructor(input) {
    this.input = input;
    this.initialized = false;
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn('Email validator already initialized');
        return;
      }
      
      this.setupEventListeners();
      
      if (this.input.value) {
        this.validateInput();
      }
      
      this.initialized = true;
      ErrorHandler.log('Email validator initialized successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing email validator: ${error.message}`);
      console.error(error);
    }
  }
  
  setupEventListeners() {
    try {
      this.input.addEventListener('input', () => {
        this.validateInput();
      });
      
      this.input.addEventListener('blur', () => {
        this.validateInput(true);
      });
      
      ErrorHandler.log('Email validator event listeners setup successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error setting up email validator event listeners: ${error.message}`);
      console.error(error);
    }
  }
  
  validateInput(showError = false) {
    try {
      const value = this.input.value.trim();
      
      if (!value && !this.input.required) {
        if (showError) {
          ErrorHandler.clearInputError(this.input);
        }
        return true;
      }
      
      if (!value && this.input.required) {
        return false;
      }
      
      const isValid = ValidationRules.validateEmail(value);
      
      if (isValid) {
        ErrorHandler.clearInputError(this.input);
      } else if (showError) {
        ErrorHandler.showInputError(this.input, 'Please enter a valid email address');
      }
      
      return isValid;
    } catch (error) {
      ErrorHandler.error(`Error validating email: ${error.message}`);
      console.error(error);
      return false;
    }
  }
  
  static initializeAll(form) {
    try {
      const emailInputs = document.querySelectorAll('input[type="email"]');
      
      emailInputs.forEach(input => {
        const validator = new EmailValidator(input);
        validator.init();
      });
      
      ErrorHandler.log(`Initialized email validation for ${emailInputs.length} inputs`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing email validation: ${error.message}`);
      console.error(error);
    }
  }
}

/**
 * Navigation - Multi-step navigation for SimpleFormly
 */
class Navigation {
  constructor(form, eventEmitter) {
    this.form = form;
    this.eventEmitter = eventEmitter;
    this.initialized = false;
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn('Navigation already initialized');
        return;
      }
      
      this.setupEventListeners();
      this.updateProgressIndicators();
      
      this.initialized = true;
      this.eventEmitter.emit('navigation:init', { navigation: this });
      
      ErrorHandler.log('Navigation initialized successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing navigation: ${error.message}`);
      console.error(error);
    }
  }
  
  setupEventListeners() {
    try {
      this.eventEmitter.on('step:change', (data) => {
        this.updateProgressIndicators();
        this.updateButtonStates();
      });
      
      this.eventEmitter.on('step:validate', (data) => {
        this.updateButtonStates();
      });
      
      ErrorHandler.log('Navigation event listeners setup successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error setting up navigation event listeners: ${error.message}`);
      console.error(error);
    }
  }
  
  goToStep(index) {
    try {
      if (index < 0 || index >= this.form.steps.length) {
        ErrorHandler.error(`Invalid step index: ${index}`);
        return;
      }
      
      if (index > this.form.currentStepIndex) {
        for (let i = this.form.currentStepIndex; i < index; i++) {
          if (!this.form.validator.validateStep(this.form.steps[i])) {
            ErrorHandler.warn(`Cannot navigate to step ${index + 1} due to validation errors in step ${i + 1}`);
            return;
          }
        }
      }
      
      this.form.showStep(index);
      
      this.eventEmitter.emit('navigation:goto', { 
        form: this.form, 
        targetStep: this.form.steps[index],
        targetStepIndex: index
      });
      
      ErrorHandler.log(`Navigated to step ${index + 1}`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error navigating to step: ${error.message}`);
      console.error(error);
    }
  }
  
  next() {
    try {
      if (this.form.currentStepIndex >= this.form.steps.length - 1) {
        ErrorHandler.warn('Already on the last step');
        return;
      }
      
      if (!this.form.validator.validateStep(this.form.steps[this.form.currentStepIndex])) {
        ErrorHandler.warn('Cannot proceed to next step due to validation errors');
        return;
      }
      
      this.goToStep(this.form.currentStepIndex + 1);
      
      ErrorHandler.log(`Moved to next step (${this.form.currentStepIndex + 1} of ${this.form.steps.length})`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error moving to next step: ${error.message}`);
      console.error(error);
    }
  }
  
  back() {
    try {
      if (this.form.currentStepIndex <= 0) {
        ErrorHandler.warn('Already on the first step');
        return;
      }
      
      this.goToStep(this.form.currentStepIndex - 1);
      
      ErrorHandler.log(`Moved to previous step (${this.form.currentStepIndex + 1} of ${this.form.steps.length})`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error moving to previous step: ${error.message}`);
      console.error(error);
    }
  }
  
  updateProgressIndicators() {
    try {
      if (this.form.progressIndicators.length > 0) {
        this.form.progressIndicators.forEach((indicator, index) => {
          if (index === this.form.currentStepIndex) {
            DOMUtils.addClass(indicator, 'current');
          } else {
            DOMUtils.removeClass(indicator, 'current');
          }
          
          if (index < this.form.currentStepIndex) {
            DOMUtils.addClass(indicator, 'completed');
          } else {
            DOMUtils.removeClass(indicator, 'completed');
          }
        });
      }
      
      if (this.form.customProgressIndicators && this.form.customProgressIndicators.length > 0) {
        this.form.customProgressIndicators.forEach((indicator, index) => {
          if (index === this.form.currentStepIndex) {
            DOMUtils.addClass(indicator, 'current');
          } else {
            DOMUtils.removeClass(indicator, 'current');
          }
          
          if (index < this.form.currentStepIndex) {
            DOMUtils.addClass(indicator, 'completed');
          } else {
            DOMUtils.removeClass(indicator, 'completed');
          }
        });
      }
      
      this.updateStepText();
      
      ErrorHandler.log('Progress indicators updated', 'info');
    } catch (error) {
      ErrorHandler.error(`Error updating progress indicators: ${error.message}`);
      console.error(error);
    }
  }
  
  updateButtonStates() {
    try {
      this.form.backButtons.forEach(button => {
        if (this.form.currentStepIndex <= 0) {
          DOMUtils.addClass(button, 'disabled');
          button.disabled = true;
        } else {
          DOMUtils.removeClass(button, 'disabled');
          button.disabled = false;
        }
      });
      
      this.form.nextButtons.forEach(button => {
        if (this.form.currentStepIndex >= this.form.steps.length - 1) {
          DOMUtils.addClass(button, 'disabled');
          button.disabled = true;
        } else {
          const currentStep = this.form.steps[this.form.currentStepIndex];
          if (currentStep.isValid) {
            DOMUtils.removeClass(button, 'disabled');
            button.disabled = false;
          } else {
            DOMUtils.addClass(button, 'disabled');
            button.disabled = true;
          }
        }
      });
      
      if (this.form.submitButton) {
        if (this.form.currentStepIndex === this.form.steps.length - 1) {
          const currentStep = this.form.steps[this.form.currentStepIndex];
          if (currentStep.isValid) {
            DOMUtils.removeClass(this.form.submitButton, 'disabled');
            this.form.submitButton.disabled = false;
          } else {
            DOMUtils.addClass(this.form.submitButton, 'disabled');
            this.form.submitButton.disabled = true;
          }
        } else {
          DOMUtils.addClass(this.form.submitButton, 'disabled');
          this.form.submitButton.disabled = true;
        }
      }
      
      ErrorHandler.log('Button states updated', 'info');
    } catch (error) {
      ErrorHandler.error(`Error updating button states: ${error.message}`);
      console.error(error);
    }
  }
  
  updateStepText() {
    try {
      const currentStepElements = DOMUtils.findByData('text', 'current-step', document);
      currentStepElements.forEach(element => {
        element.textContent = this.form.currentStepIndex + 1;
      });
      
      const totalStepsElements = DOMUtils.findByData('text', 'total-steps', document);
      totalStepsElements.forEach(element => {
        element.textContent = this.form.steps.length;
      });
      
      ErrorHandler.log('Step text updated', 'info');
    } catch (error) {
      ErrorHandler.error(`Error updating step text: ${error.message}`);
      console.error(error);
    }
  }
}

/**
 * ProgressIndicator - Progress indicator management for SimpleFormly
 */
class ProgressIndicator {
  constructor(form, eventEmitter) {
    this.form = form;
    this.eventEmitter = eventEmitter;
    this.progressContainer = null;
    this.progressIndicators = [];
    this.customProgressIndicators = [];
    this.initialized = false;
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn('Progress indicator already initialized');
        return;
      }
      
      this.findProgressElements();
      this.setupEventListeners();
      this.updateIndicators();
      
      this.initialized = true;
      this.eventEmitter.emit('progress:init', { progressIndicator: this });
      
      ErrorHandler.log('Progress indicator initialized successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing progress indicator: ${error.message}`);
      console.error(error);
    }
  }
  
  findProgressElements() {
    try {
      const progressContainers = DOMUtils.findByData('form', 'progress', document);
      if (progressContainers.length > 0) {
        this.progressContainer = progressContainers[0];
        
        this.progressIndicators = DOMUtils.findByData('form', 'progress-indicator', this.progressContainer);
        
        if (this.progressIndicators.length === 0) {
          ErrorHandler.warn('Progress container found but no progress indicators');
        } else if (this.progressIndicators.length !== this.form.steps.length) {
          ErrorHandler.warn(`Number of progress indicators (${this.progressIndicators.length}) does not match number of steps (${this.form.steps.length})`);
        }
      }
      
      const customIndicators = DOMUtils.findByData('form', 'custom-progress-indicator', document);
      if (customIndicators.length > 0) {
        if (customIndicators.length !== this.form.steps.length) {
          ErrorHandler.warn(`Number of custom indicators (${customIndicators.length}) does not match number of steps (${this.form.steps.length})`);
        }
        this.customProgressIndicators = customIndicators;
      }
      
      ErrorHandler.log(`Found ${this.progressContainer ? 1 : 0} progress container, ${this.progressIndicators.length} progress indicators, and ${this.customProgressIndicators.length} custom indicators`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error finding progress elements: ${error.message}`);
      console.error(error);
    }
  }
  
  setupEventListeners() {
    try {
      this.eventEmitter.on('step:change', (data) => {
        this.updateIndicators();
      });
      
      if (this.customProgressIndicators.length > 0) {
        this.customProgressIndicators.forEach((indicator, index) => {
          if (indicator.getAttribute('data-clickable') === 'true') {
            indicator.addEventListener('click', () => {
              this.handleIndicatorClick(index);
            });
          }
        });
      }
      
      ErrorHandler.log('Progress indicator event listeners setup successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error setting up progress indicator event listeners: ${error.message}`);
      console.error(error);
    }
  }
  
  updateIndicators() {
    try {
      const currentStepIndex = this.form.currentStepIndex;
      
      if (this.progressIndicators.length > 0) {
        this.progressIndicators.forEach((indicator, index) => {
          if (index === currentStepIndex) {
            DOMUtils.addClass(indicator, 'current');
          } else {
            DOMUtils.removeClass(indicator, 'current');
          }
          
          if (index < currentStepIndex) {
            DOMUtils.addClass(indicator, 'completed');
          } else {
            DOMUtils.removeClass(indicator, 'completed');
          }
        });
      }
      
      if (this.customProgressIndicators.length > 0) {
        this.customProgressIndicators.forEach((indicator, index) => {
          if (index === currentStepIndex) {
            DOMUtils.addClass(indicator, 'current');
          } else {
            DOMUtils.removeClass(indicator, 'current');
          }
          
          if (index < currentStepIndex) {
            DOMUtils.addClass(indicator, 'completed');
          } else {
            DOMUtils.removeClass(indicator, 'completed');
          }
        });
      }
      
      ErrorHandler.log('Progress indicators updated', 'info');
    } catch (error) {
      ErrorHandler.error(`Error updating progress indicators: ${error.message}`);
      console.error(error);
    }
  }
  
  handleIndicatorClick(index) {
    try {
      if (index < this.form.currentStepIndex) {
        this.form.showStep(index);
      } else if (index > this.form.currentStepIndex) {
        let canNavigate = true;
        
        for (let i = this.form.currentStepIndex; i < index; i++) {
          if (!this.form.steps[i].isValid) {
            canNavigate = false;
            break;
          }
        }
        
        if (canNavigate) {
          this.form.showStep(index);
        } else {
          ErrorHandler.warn('Cannot navigate to future step due to validation errors in current or intermediate steps');
        }
      }
      
      ErrorHandler.log(`Indicator clicked for step ${index + 1}`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error handling indicator click: ${error.message}`);
      console.error(error);
    }
  }
  
  createAutoIndicators() {
    try {
      if (this.progressContainer && this.progressIndicators.length === 0) {
        this.progressContainer.innerHTML = '';
        
        for (let i = 0; i < this.form.steps.length; i++) {
          const indicator = document.createElement('div');
          indicator.setAttribute('data-form', 'progress-indicator');
          indicator.className = 'progress-indicator';
          
          if (i === 0) {
            indicator.classList.add('current');
          }
          
          this.progressContainer.appendChild(indicator);
        }
        
        this.progressIndicators = DOMUtils.findByData('form', 'progress-indicator', this.progressContainer);
        
        ErrorHandler.log(`Created ${this.form.steps.length} auto-generated progress indicators`, 'info');
      }
    } catch (error) {
      ErrorHandler.error(`Error creating auto indicators: ${error.message}`);
      console.error(error);
    }
  }
}

/**
 * Form - Form management for SimpleFormly
 */
class Form {
  constructor(element, eventEmitter) {
    this.element = element;
    this.eventEmitter = eventEmitter;
    this.steps = [];
    this.currentStepIndex = 0;
    this.nextButtons = [];
    this.backButtons = [];
    this.submitButton = null;
    this.progressContainer = null;
    this.progressIndicators = [];
    this.customProgressIndicators = [];
    this.validator = null;
    this.navigation = null;
    this.progressIndicator = null;
    this.initialized = false;
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn('Form already initialized');
        return;
      }
      
      this.findSteps();
      this.findButtons();
      this.findProgressIndicators();
      
      this.validator = new Validator(this, this.eventEmitter);
      this.validator.init();
      
      this.navigation = new Navigation(this, this.eventEmitter);
      this.navigation.init();
      
      this.progressIndicator = new ProgressIndicator(this, this.eventEmitter);
      this.progressIndicator.init();
      
      this.setupEventListeners();
      
      // Initialize phone formatters
      PhoneFormatter.initializeAll(this);
      
      // Initialize email validators
      EmailValidator.initializeAll(this);
      
      // Show first step
      this.showStep(0);
      
      this.initialized = true;
      this.eventEmitter.emit('form:init', { form: this });
      
      ErrorHandler.log('Form initialized successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing form: ${error.message}`);
      console.error(error);
    }
  }
  
  findSteps() {
    try {
      const stepElements = DOMUtils.findByData('form', 'step', this.element);
      
      if (stepElements.length === 0) {
        ErrorHandler.error('No steps found in form');
        return;
      }
      
      stepElements.forEach((stepElement, index) => {
        const step = new Step(stepElement, index, this.eventEmitter);
        this.steps.push(step);
        step.init();
      });
      
      ErrorHandler.log(`Found ${this.steps.length} steps`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error finding steps: ${error.message}`);
      console.error(error);
    }
  }
  
  findButtons() {
    try {
      this.nextButtons = DOMUtils.findByData('form', 'next-btn', document);
      
      this.backButtons = DOMUtils.findByData('form', 'back-btn', document);
      
      const submitButtons = DOMUtils.findByData('form', 'submit-btn', this.element);
      if (submitButtons.length > 0) {
        this.submitButton = submitButtons[0];
      } else {
        ErrorHandler.warn('No submit button found in form');
      }
      
      ErrorHandler.log(`Found ${this.nextButtons.length} next buttons, ${this.backButtons.length} back buttons, and ${this.submitButton ? 1 : 0} submit button`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error finding buttons: ${error.message}`);
      console.error(error);
    }
  }
  
  findProgressIndicators() {
    try {
      const progressContainers = DOMUtils.findByData('form', 'progress', document);
      if (progressContainers.length > 0) {
        this.progressContainer = progressContainers[0];
        
        this.progressIndicators = DOMUtils.findByData('form', 'progress-indicator', this.progressContainer);
        
        if (this.progressIndicators.length === 0) {
          ErrorHandler.warn('Progress container found but no progress indicators');
        } else if (this.progressIndicators.length !== this.steps.length) {
          ErrorHandler.warn(`Number of progress indicators (${this.progressIndicators.length}) does not match number of steps (${this.steps.length})`);
        }
      }
      
      const customIndicators = DOMUtils.findByData('form', 'custom-progress-indicator', document);
      if (customIndicators.length > 0) {
        if (customIndicators.length !== this.steps.length) {
          ErrorHandler.warn(`Number of custom indicators (${customIndicators.length}) does not match number of steps (${this.steps.length})`);
        }
        this.customProgressIndicators = customIndicators;
      }
      
      ErrorHandler.log(`Found ${this.progressContainer ? 1 : 0} progress container and ${this.progressIndicators.length} progress indicators`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error finding progress indicators: ${error.message}`);
      console.error(error);
    }
  }
  
  setupEventListeners() {
    try {
      this.nextButtons.forEach(button => {
        button.addEventListener('click', (event) => {
          event.preventDefault();
          this.next();
        });
      });
      
      this.backButtons.forEach(button => {
        button.addEventListener('click', (event) => {
          event.preventDefault();
          this.back();
        });
      });
      
      if (this.submitButton) {
        this.submitButton.addEventListener('click', (event) => {
          if (!this.validator.validateStep(this.steps[this.currentStepIndex])) {
            event.preventDefault();
            ErrorHandler.warn('Form submission prevented due to validation errors');
          } else {
            this.eventEmitter.emit('form:submit', { form: this });
          }
        });
      }
      
      ErrorHandler.log('Event listeners setup successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error setting up event listeners: ${error.message}`);
      console.error(error);
    }
  }
  
  showStep(index) {
    try {
      if (index < 0 || index >= this.steps.length) {
        ErrorHandler.error(`Invalid step index: ${index}`);
        return;
      }
      
      this.steps.forEach(step => step.hide());
      
      this.steps[index].show();
      
      this.currentStepIndex = index;
      
      if (this.element.getAttribute('data-scroll-top') === 'true') {
        DOMUtils.scrollTo(this.element);
      }
      
      this.eventEmitter.emit('step:change', { 
        form: this, 
        currentStep: this.steps[index],
        currentStepIndex: index,
        totalSteps: this.steps.length
      });
      
      ErrorHandler.log(`Showing step ${index + 1} of ${this.steps.length}`, 'info');
    } catch (error) {
      ErrorHandler.error(`Error showing step: ${error.message}`);
      console.error(error);
    }
  }
  
  next() {
    this.navigation.next();
  }
  
  back() {
    this.navigation.back();
  }
  
  submit() {
    try {
      if (!this.validator.validateStep(this.steps[this.currentStepIndex])) {
        ErrorHandler.warn('Cannot submit form due to validation errors');
        return;
      }
      
      this.element.submit();
      
      this.eventEmitter.emit('form:submit', { form: this });
      
      ErrorHandler.log('Form submitted', 'info');
    } catch (error) {
      ErrorHandler.error(`Error submitting form: ${error.message}`);
      console.error(error);
    }
  }
}

/**
 * SimpleFormly - Main class
 */
class SimpleFormly {
  constructor() {
    this.forms = [];
    this.currentForm = null;
    this.initialized = false;
    this.eventEmitter = new EventEmitter();
  }
  
  init() {
    try {
      if (this.initialized) {
        ErrorHandler.warn('SimpleFormly already initialized');
        return;
      }
      
      this.findForms();
      
      if (this.forms.length === 0) {
        ErrorHandler.warn('No multi-step forms found on the page');
        return;
      }
      
      if (this.forms.length > 1) {
        ErrorHandler.warn('Multiple multi-step forms found. Only the first one will be used.');
      }
      
      this.currentForm = this.forms[0];
      this.currentForm.init();
      
      this.setupGlobalEvents();
      this.initialized = true;
      
      this.eventEmitter.emit('simpleformly:initialized', { form: this.currentForm });
      
      ErrorHandler.log('SimpleFormly initialized successfully', 'info');
    } catch (error) {
      ErrorHandler.error(`Error initializing SimpleFormly: ${error.message}`);
      console.error(error);
    }
  }
  
  findForms() {
    try {
      const formElements = document.querySelectorAll('form[data-form="multistep"]');
      
      formElements.forEach(formElement => {
        this.forms.push(new Form(formElement, this.eventEmitter));
      });
      
    } catch (error) {
      ErrorHandler.error(`Error finding forms: ${error.message}`);
      console.error(error);
    }
  }
  
  setupGlobalEvents() {
    try {
      if (this.currentForm.element.getAttribute('data-submit') === 'true') {
        document.addEventListener('keydown', (event) => {
          if ((event.metaKey || event.ctrlKey) && event.key === 'Enter') {
            event.preventDefault();
            this.currentForm.submit();
          }
        });
      }
      
      if (this.currentForm.element.getAttribute('data-enter') === 'true') {
        document.addEventListener('keydown', (event) => {
          if (event.key === 'Enter' && !event.metaKey && !event.ctrlKey) {
            const activeElement = document.activeElement;
            if (activeElement.tagName !== 'TEXTAREA' && activeElement.getAttribute('data-enter') !== 'false') {
              event.preventDefault();
              this.currentForm.next();
            }
          }
        });
      }
      
    } catch (error) {
      ErrorHandler.error(`Error setting up global events: ${error.message}`);
      console.error(error);
    }
  }
}

// Initialize SimpleFormly when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.simpleFormly = new SimpleFormly();
  window.simpleFormly.init();
});
